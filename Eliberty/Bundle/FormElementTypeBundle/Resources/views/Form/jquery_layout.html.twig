{% block eliberty_boolean_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('.{{className}}').click(function() {
                    if (!$(this).parent().parent().hasClass('disabled')) {
                        if ($(this).parent().parent().hasClass('true')) {
                            $(this).parent().parent().addClass('false').removeClass('true');
                            $(this).children().attr('value','false');
                        } else {
                            $(this).children().attr('value','true');
                            $(this).parent().parent().addClass('true').removeClass('false');
                        }
                    }
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_boolean_javascript %}

{% block eliberty_multiselect_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':multiselect.html.twig' %}
        <script type="text/javascript">

            $(function () {
                $('#{{ id }}').multiselect({
                    enableFiltering: true,
                    filterBehavior: 'both',
                    buttonWidth: '100%',
                    buttonContainer: '<div class="btn-group" style="width:inherit;" />',
                    enableCaseInsensitiveFiltering: true,
                    filterPlaceholder: '{{'rp.console.contact.search' | trans }}'
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_multiselect_javascript %}

{% block eliberty_markdown_editor_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':markdown.html.twig' %}
        <script type="text/javascript">
            $(function () {
                $('.markdown_editor_{{ id }}').markdown();
                $('.md-header').addClass('transparent');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_markdown_editor_javascript %}

{% block eliberty_datetime_picker_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datetimepicker.html.twig' %}
        <script type="text/javascript">
        $(function () {
            $('#datetimepicker-{{id}}').datetimepicker({
                language: 'fr',
                pick12HourFormat: false
            });
            //$('#datetimepicker-{{id}}').data("DateTimePicker").setDate("10/23/2013")
        });
        </script>
    {% endspaceless %}
{% endblock %}

{% block eliberty_datepicker_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datepicker.html.twig' %}
    <script type="text/javascript">
    $(function () {
         $('.eliberty_datepicker').datepicker(
            {
                format: 'dd/mm/yyyy',
                autoclose: true,
                startDate: moment().toDate(),
                weekStart: 1,
                language: '{{ app.request.locale |lower }}',
                onRender: function(date) {
                    return date.valueOf() < tomorrow.valueOf() ? 'disabled' : '';
                }
            }
        );
        $('.glyphicon-calendar').on('click', function(e){$(this).closest('.input-group').find('input').datepicker('show');});
    });
    </script>
    {% endspaceless %}
{% endblock eliberty_datepicker_javascript %}

{% block eliberty_integer_javascript %}
    {% spaceless %}
        {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
            <script type="text/javascript" src="{{ asset_url }}"></script>
        {% endjavascripts %}
        <script type="text/javascript">
            $('#{{id}}').numeric(false, function () {
                alert("Integers only");
                this.value = "";
                this.focus();
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_integer_javascript %}

{% block eliberty_decimal_javascript %}
    {% spaceless %}
        {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
            <script type="text/javascript" src="{{ asset_url }}"></script>
        {% endjavascripts %}
        <script type="text/javascript">
            $('#{{id}}').numeric(".");
        </script>
    {% endspaceless %}
{% endblock eliberty_decimal_javascript %}

{% block eliberty_rest_choice_javascript %}
<script type="text/javascript">
    {% if attr.start is defined and attr.start != "" %}
        $(function () {
            $('#{{id}}').chosen()
        });
        function {{attr.start}} {
            var valueParent = $('#' + id).val();
            var params = "{{attr.params}}";
            var newParams = params.replace('(id)', valueParent);
                {% if attr.parentId is defined and attr.parentId != "" %}
                    var valueFirstParent = $('#{{attr.parentId}}').val();
                    newParams = newParams.replace('(parentId)', valueFirstParent)
                {% endif %}
    {% else %}
            $(function () {
                        $('#{{id}}').chosen()
                        var newParams = null;
    {% endif %}
                        var newRoute = '{{attr.route}}';
                        var spinner = $('.container_spinner').html();
                        $.when($.ajax({
                                    type: 'GET',
                                    dataType: 'json',
                                    data: {'params': newParams},
                                    url: newRoute,
                                    {% if attr.ajaxstart is defined and attr.ajaxstart != "" %}
                                    beforeSend: function () {
                                        $(".{{attr.ajaxstart}}").empty().html($('.container_spinner').html());
                                    },
                                    complete: function () {
                                        $(".{{attr.ajaxstart}}").empty();
                                    },
                                    {% endif %}
                                })).then(function (data) {
                            var obj = $('#{{id}}');
                            obj.find("option").remove();
                           // obj.append(new Option('-----------------------------------------', -1));
                            $.each({{attr.dataResponse}}, function (i, item) {
                                var option = new Option({{attr.dataLabel}}, item.id);
                                $(option).attr('data', encodeURIComponent(JSON.stringify(item)));
                                obj.append(option);
                                //return false;
                            });
                            {% if attr.change is defined and attr.change != null %}
                                obj.val('').trigger("chosen:updated");
                                obj.chosen().on("change", function (e) {
                                    {{attr.change}}('{{id}}');
                                });
                            {% endif %}

                            $('ul.dropdown-menu.inner').css('position', 'relative');
                            $('ul.dropdown-menu.inner').find('li').find('i').remove();

                        }, function (err) {
                            onAjaxApiError(err);
                        });
                    }
    {% if attr.start is not defined %} ); {% endif %}
</script>
{% endblock eliberty_rest_choice_javascript %}

{% block eliberty_chosen_javascript %}
 {% spaceless %}
     <script type="text/javascript">
         $(function () {
             'use strict';
            $('#{{form.vars.id}}').chosen({
                    {% if attr.max_selected_options is defined %} max_selected_options: {{attr.max_selected_options}},  {% endif %}
                    {% if attr.allow_single_deselect is defined %} allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %} search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %} placeholder_text_single: '{{attr.placeholder_text_single}}', {% endif %}
             });
        });
    </script>
  {% endspaceless %}
{% endblock eliberty_chosen_javascript %}

{% block eliberty_chosen_entity_javascript %}
    {% spaceless %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{form.vars.id}}').chosen({
                    {% if attr.max_selected_options is defined %} max_selected_options: {{attr.max_selected_options}},  {% endif %}
                    {% if attr.allow_single_deselect is defined %} allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %} search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %} placeholder_text_single: '{{attr.placeholder_text_single}}', {% endif %}
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_chosen_entity_javascript %}

{% block eliberty_bnt_choice_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':bootstrap-select.html.twig' %}
        <script type="text/javascript">

            $(function () {
                $('.eliberty_bnt_choice_{{ id }}').selectpicker();
                $('.eliberty_bnt_choice_{{ id }}').css('width','inherit');
                {% if attr.setStyle is defined %}
                    setStyleSelect();
                    $('.eliberty_bnt_choice_{{ id }}').on('change', function(e) {
                        setStyleSelect();
                    });
                {% endif %}
            });
            {% if attr.setStyle is defined %}
            function setStyleSelect(){
                var selectObj = $('.eliberty_bnt_choice_{{ id }}');
                var style = 'btn-success';
                if(jQuery.inArray(selectObj.val(), '{{ attr.danger }}'.split(',')) !== -1) {
                    style = 'btn-danger';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.info }}'.split(',')) !== -1) {
                    style = 'btn-info';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.warning }}'.split(',')) !== -1) {
                    style = 'btn-warning';
                }
                selectObj.selectpicker('setStyle', $('.eliberty_bnt_choice_{{ id }}').attr('removeClass'), 'remove')
                selectObj.selectpicker('setStyle', style);
                selectObj.attr('removeClass', style);
            }
            {% endif %}
        </script>

    {% endspaceless %}
{% endblock eliberty_bnt_choice_javascript %}

{#{% block eliberty_json_javascript %}#}
    {#{% spaceless %}#}
        {#{% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':jsoneditor.html.twig' %}#}
    {#<script type="text/javascript">#}
        {#$(function () {#}
            {#// create the editor#}

            {#var options = {#}
                {#"modes": ['code', 'form', 'text', 'tree', 'view'],#}
                {#"indentation": 2,#}
                {#"search": false,#}
                {#"error": function () { alert("Le text n'est pas au format Json");},#}
                {#"change": function () {#}
                    {#var text = $("#jsoneditor-{{id}}").find('textarea').val();#}
                    {#$('#{{id}}').attr('value',text.replace(/'/g, '"'));#}
                {#}#}
            {#};#}
            {#var editor = new JSONEditor($("#jsoneditor-{{id}}")[0], options);#}

            {#// set json#}
            {#var json = JSON.parse('{{value}}');#}
            {#editor.set(json);#}

            {#// get json#}
            {#var json = editor.get();#}
        {#});#}
    {#</script>#}
    {#{% endspaceless %}#}
{#{% endblock eliberty_json_javascript %}#}