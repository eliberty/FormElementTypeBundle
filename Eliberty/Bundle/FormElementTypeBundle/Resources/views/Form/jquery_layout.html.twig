{% block eliberty_boolean_javascript %}
    {% spaceless %}
        {% set entityName = getEntityName(form.parent.vars.data) %}
        {% set className = entityName ~ '_' ~ form.vars.name ~ '_' ~ form.vars.id  %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('.{{className}}').click(function() {
                    if (!$(this).parent().parent().hasClass('disabled')) {
                        if ($(this).parent().parent().hasClass('true')) {
                            $(this).parent().parent().addClass('false').removeClass('true');
                            $(this).children().attr('value','false');
                        } else {
                            $(this).children().attr('value','true');
                            $(this).parent().parent().addClass('true').removeClass('false');
                        }
                    }
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_boolean_javascript %}

{% block eliberty_multiselect_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':multiselect.html.twig' %}
        {% endif %}
        <script type="text/javascript">

            $(function () {
                $('#{{ id }}').multiselect({
                    enableFiltering: true,
                    filterBehavior: 'both',
                    buttonWidth: '100%',
                    buttonContainer: '<div class="btn-group" style="width:inherit;" />',
                    enableCaseInsensitiveFiltering: true,
                    filterPlaceholder: '{{'rp.console.contact.search' | trans }}'
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_multiselect_javascript %}

{% block eliberty_markdown_editor_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':markdown.html.twig' %}
        {% endif %}
        <script type="text/javascript">
            $(function () {
                $('.markdown_editor_{{ id }}').markdown();
                $('.md-header').addClass('transparent');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_markdown_editor_javascript %}

{% block eliberty_datetime_picker_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datetimepicker.html.twig' %}
        {% endif %}
        <script type="text/javascript">
        $(function () {
            $('#{{id}}').datetimepicker({
                language: 'fr',
                pick12HourFormat: false
            });
        });
        </script>
    {% endspaceless %}
{% endblock %}

{% block eliberty_datepicker_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':datepicker.html.twig' %}
        {% endif %}
    <script type="text/javascript">
    $(function () {
         $('.eliberty_datepicker').datepicker(
            {
                format: 'dd/mm/yyyy',
                autoclose: true,
                startDate: moment().toDate(),
                weekStart: 1,
                language: '{{ app.request.locale |lower }}',
                onRender: function(date) {
                    return date.valueOf() < tomorrow.valueOf() ? 'disabled' : '';
                }
            }
        );
        $('.glyphicon-calendar').on('click', function(e){$(this).closest('.input-group').find('input').datepicker('show');});
    });
    </script>
    {% endspaceless %}
{% endblock eliberty_datepicker_javascript %}

{% block eliberty_integer_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
                <script type="text/javascript" src="{{ asset_url }}"></script>
            {% endjavascripts %}
        {% endif %}
        <script type="text/javascript">
            $('#{{id}}').numeric(false, function () {
                alert("Integers only");
                this.value = "";
                this.focus();
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_integer_javascript %}

{% block eliberty_decimal_javascript %}
    {% spaceless %}
        {% if attr.withoutJsFile is not defined %}
            {% javascripts '@ElibertyFormElementTypeBundle/Resources/public/js/jquery.numeric.js' %}
                <script type="text/javascript" src="{{ asset_url }}"></script>
            {% endjavascripts %}
        {% endif %}
        <script type="text/javascript">
            $('#{{id}}').numeric(".");
        </script>
    {% endspaceless %}
{% endblock eliberty_decimal_javascript %}

{% block eliberty_rest_choice_javascript %}
<script type="text/javascript">
    {% if attr.start is defined and attr.start != "" %}
        $(function () {
            $('#{{id}}').chosen()
        });
        function {{attr.start}} {
            var valueParent = $('#' + id).val();
            var params = "{{attr.params}}";
            var newParams = params.replace('(id)', valueParent);
                {% if attr.parentId is defined and attr.parentId != "" %}
                    var valueFirstParent = $('#{{attr.parentId}}').val();
                    newParams = newParams.replace('(parentId)', valueFirstParent)
                {% endif %}
    {% else %}
            $(function () {
                        $('#{{id}}').chosen()
                        var newParams = null;
    {% endif %}
                        var newRoute = '{{attr.route}}';
                        var spinner = $('.container_spinner').html();
                        $.when($.ajax({
                                    type: 'GET',
                                    dataType: 'json',
                                    data: {'params': newParams},
                                    url: newRoute,
                                    {% if attr.ajaxstart is defined and attr.ajaxstart != "" %}
                                    beforeSend: function () {
                                        $(".{{attr.ajaxstart}}").empty().html($('.container_spinner').html());
                                    },
                                    complete: function () {
                                        $(".{{attr.ajaxstart}}").empty();
                                    },
                                    {% endif %}
                                })).then(function (data) {
                            var obj = $('#{{id}}');
                            obj.find("option").remove();
                           // obj.append(new Option('-----------------------------------------', -1));
                            $.each({{attr.dataResponse}}, function (i, item) {
                                var option = new Option({{attr.dataLabel}}, item.id);
                                $(option).attr('data', encodeURIComponent(JSON.stringify(item)));
                                obj.append(option);
                                //return false;
                            });
                            {% if attr.change is defined and attr.change != null %}
                                obj.val('').trigger("chosen:updated");
                                obj.chosen().on("change", function (e) {
                                    {{attr.change}}('{{id}}');
                                });
                            {% endif %}

                            $('ul.dropdown-menu.inner').css('position', 'relative');
                            $('ul.dropdown-menu.inner').find('li').find('i').remove();

                        }, function (err) {
                            onAjaxApiError(err);
                        });
                    }
    {% if attr.start is not defined %} ); {% endif %}
</script>
{% endblock eliberty_rest_choice_javascript %}

{% block eliberty_chosen_javascript %}
 {% spaceless %}
     <script type="text/javascript">
         $(function () {
             'use strict';
            $('#{{form.vars.id}}').chosen({
                    {% if attr.max_selected_options is defined %} max_selected_options: {{attr.max_selected_options}},  {% endif %}
                    {% if attr.allow_single_deselect is defined %} allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %} search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %} placeholder_text_single: '{{attr.placeholder_text_single}}', {% endif %}
             });
        });
    </script>
  {% endspaceless %}
{% endblock eliberty_chosen_javascript %}

{% block eliberty_chosen_entity_javascript %}
    {% spaceless %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{form.vars.id}}').chosen({
                    {% if attr.max_selected_options is defined %} max_selected_options: {{attr.max_selected_options}},  {% endif %}
                    {% if attr.allow_single_deselect is defined %} allow_single_deselect: true, {% endif %}
                    {% if attr.search_contains is defined %} search_contains: true, {% endif %}
                    {% if attr.placeholder_text_single is defined %} placeholder_text_single: '{{attr.placeholder_text_single}}', {% endif %}
                });
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_chosen_entity_javascript %}

{% block eliberty_bnt_choice_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':bootstrap-select.html.twig' %}
        <script type="text/javascript">

            $(function () {
                $('.eliberty_bnt_choice_{{ id }}').selectpicker();
                $('.eliberty_bnt_choice_{{ id }}').css('width','inherit');
                {% if attr.setStyle is defined %}
                    setStyleSelect();
                    $('.eliberty_bnt_choice_{{ id }}').on('change', function(e) {
                        setStyleSelect();
                    });
                {% endif %}
            });
            {% if attr.setStyle is defined %}
            function setStyleSelect(){
                var selectObj = $('.eliberty_bnt_choice_{{ id }}');
                var style = 'btn-success';
                if(jQuery.inArray(selectObj.val(), '{{ attr.danger }}'.split(',')) !== -1) {
                    style = 'btn-danger';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.info }}'.split(',')) !== -1) {
                    style = 'btn-info';
                } else if (jQuery.inArray(selectObj.val(), '{{ attr.warning }}'.split(',')) !== -1) {
                    style = 'btn-warning';
                }
                selectObj.selectpicker('setStyle', $('.eliberty_bnt_choice_{{ id }}').attr('removeClass'), 'remove')
                selectObj.selectpicker('setStyle', style);
                selectObj.attr('removeClass', style);
            }
            {% endif %}
        </script>

    {% endspaceless %}
{% endblock eliberty_bnt_choice_javascript %}

{% block eliberty_json_javascript %}
    {% spaceless %}
        {% if attr.withEditor is defined and attr.withEditor == 'true' %}
            {% if attr.withoutJsFile is not defined %}
                {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':jsoneditor.html.twig' %}
            {% endif %}
            <script type="text/javascript">
                var schema_{{ id }} = {% if attr.schema is defined %}{{attr.schema}}{% else %}'{}'{% endif %};
                var jsonEditor_{{ id }};
                var startval_{{ id }} = {% if value is null or value == '' %}''{% else %}{{ value }}{% endif %};
                var editor_{{ id }} = document.getElementById("editor_holder_{{ id }}");
                var validate_{{ id }} = document.getElementById('valid_indicator_{{ id }}') ;
                $(function () {


                    if (schema_{{ id }} instanceof Object) {
                        $('#schema_editor_{{id}}').val(jsl.format.formatJson(JSON.stringify(schema_{{ id }})));
                    } else {
                        $('#schema_editor_{{id}}').val(jsl.format.formatJson(schema_{{ id }}));
                    }
                    /**
                     * reload schema
                     * @param keep_value
                     */
                    var reload_{{ id }} = function(keep_value) {
                        var startval = (jsonEditor_{{ id }} && keep_value)? jsonEditor_{{ id }}.getValue() : window.startval_{{ id }};
                        window.startval_{{ id }} = undefined;

                        if(startval instanceof Object && startval.hasOwnProperty('data')){
                            startval = startval.data;
                        }
                        //destroy last editor if exist
                        if(jsonEditor_{{ id }}) jsonEditor_{{ id }}.destroy();
                        //create new editor
                        jsonEditor_{{ id }} = new JSONEditor(editor_{{ id }},{
                            schema: schema_{{ id }},
                            theme: 'bootstrap2',
                            startval: startval
                        });

                        //set the language
                        JSONEditor.defaults.language = '{{ app.request.locale }}';
                        {% raw %}
                            JSONEditor.defaults.languages.fr = {
                                error_minLength: "La valeur doit être au moins {{0}} caractères!"
                            };
                        {% endraw %}

                        window.jsonEditor_{{ id }} = jsonEditor_{{ id }};

                        // When the value of the editor changes, update the JSON output and validation message
                        jsonEditor_{{ id }}.on('change',function() {
                            var json = jsonEditor_{{ id }}.getValue();
                            var validation_errors = jsonEditor_{{ id }}.validate();

                            // Show validation errors if there are any
                            if(validation_errors.length) {
                                $('#btnJson{{ id }}').removeClass('btn-success').addClass('btn-danger')
                                if($('#{{ id }}').parent().parent().hasClass('has-error') === false) {
                                    var errorAsString = '';
                                    $.each(validation_errors, function (index, obj) {
                                        errorAsString += '<br>' + obj.message;
                                    });
                                    $('#valid_indicator_{{ id }}').html(errorAsString).css('color','red');
                                }
                            } else {
                                $('#valid_indicator_{{ id }}').empty();
                                $('#btnJson{{ id }}').removeClass('btn-danger').addClass('btn-success');
                            }
                        });
                    };
                    reload_{{ id }}();


                    /**
                     * update schema
                     */
                    $('#btnJsonSchemaUpdate{{id}}').on('click', function(event){
                        event.preventDefault();
                        try {
                            schema_{{ id }} = JSON.parse($('#schema_editor_{{id}}').val());
                        } catch(e) {
                            alert('Invalid Schema: '+e.message);
                            return;
                        }
                        reload_{{ id }}();
                        $('#tab_{{ id }} a:first').tab('show')
                    });

                    /**
                     * save the data and the schema into textarea
                     */
                    $("#btnJsonModalSave{{ id }}").on('click', function(event){
                        var jsonData ;
                        {% if attr.withSchema is defined %}
                            jsonData = {
                                "schema" : jsonEditor_{{ id }}.schema,
                                "data" : jsonEditor_{{ id }}.getValue()
                            };
                        {% else %}
                            jsonData = jsonEditor_{{ id }}.getValue();
                        {% endif %}

                        $('#{{ id }}').val(jsl.format.formatJson(JSON.stringify(jsonData)));
                        $('#myModalJson{{id}}').modal('hide');
                    });
                });

            </script>
        {% endif  %}
    {% endspaceless %}
{% endblock eliberty_json_javascript %}

{% block eliberty_colorpicker_javascript %}
    {% spaceless %}
        {% include 'ElibertyFormElementTypeBundle:Form/Js/' ~ formelementtypemode ~':colorpicker.html.twig' %}
        <script type="text/javascript">
            $(function () {
                'use strict';
                $('#{{ id }}').pickAColor();
                {% if attr.sizeClass is defined %}
                    $('#{{ id }}').parent().parent().addClass('{{ attr.sizeClass }}');
                {% endif %}
                $('.content').css('overflow-y','auto');
            });
        </script>
    {% endspaceless %}
{% endblock eliberty_colorpicker_javascript %}